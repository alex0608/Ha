
babylon tower-------------------------------------------------

#include <iostream>
#include <vector>
#include <algorithm>
#include <stdio.h>
#include <string.h>
using namespace std;
 
struct Block {
    int x, y, z, all[3];
    Block(){}
    Block(int X, int Y, int Z) : x(X), y(Y), z(Z) { all = {x,y,z}; }
};
bool buildable(const Block& a, const Block& b) {
    return ((a.x > b.x) && (a.y > b.y)) || ((a.x > b.y) && (a.y > b.x));
}
 
bool operator<(const Block& a, const Block& b) {
    for (int i = 0; i < 3; i++){
        if (a.all[i] > b.all[i]) return 1;
        else if (a.all[i] < b.all[i]) return 0;
    }
    return 0;
}
int main() {
    size_t N, x, y, z, i, j, kase=0;
    while (cin>>N && N) {
        vector<Block> v(N);
        while (N-- && cin>>x>>y>>z ) {
            v.push_back(Block(x, z, y)), v.push_back(Block(x, y, z)), v.push_back(Block(y, z, x));
            v.push_back(Block(z, x, y)), v.push_back(Block(y, x, z)), v.push_back(Block(z, y, x));
        }
        sort(v.begin(), v.end());
        int maxL = 0, S[v.size()];
        for (i = 0; i < v.size(); i++) {
            S[i] = v[i].z;
            for (j = 0; j < i; j++)
                if (buildable(v[j], v[i])) S[i] = max(S[i], S[j] + v[i].z);
            maxL = max(maxL, S[i]);
        }
        printf("Case %d: maximum height = %d\n", ++kase, maxL);
    }
    return 0;
}


max sub int

#include <cstdio>
#include <iostream>
using namespace std;
const int MAX=100;
int nset[MAX+1];
int n;

int MAX_SUBINT(int *nset, int size)
{
  int max_by_now = 0, max_here = 0;

	for (int i = 0; i < size; i++)
	{
		if(max_here + nset[i] < nset[i])
		{
			max_here = nset[i];
		}
		else
		{
			max_here = max_here + nset[i];
		}
		if(max_here > max_by_now)
		{
			max_by_now = max_here;
		}
	}
	return max_by_now;
}

int main()
{
	scanf("%d",&n);
	
	for(int i = 0; i < n; i ++)// input
	{
		scanf("%d", &nset[i]);
	}
	printf("\n%d", MAX_SUBINT(nset, n));

}



Longest path
#include <cstdio>

using namespace std;

int N, M, tmp_len, tmp_start, tmp_end;

struct road
{
	int length;
	int end;
};

int maximum = 0;
road road_g[1024][1024]={(0,0)};
int dist[1204];
void DFS(road* inspected, int obtrusive_road)
{
	int d1;
	for (int i = 1; i <= inspected[0].length; i++)
	{
		d1 = obtrusive_road + inspected[i].length;
		if(dist[inspected[i].end] < d1)
		{
			dist[inspected[i].end] = d1;
			DFS(road_g[inspected[i].end], d1);
		}
	}

	//if (obtrusive_road > maximum)
	//{
	//	maximum = obtrusive_road;
	//}
	
}



int main()
{
	scanf("%d%d", &N, &M);
	
	for(int i = 0; i < M; i++)
	{
		scanf("%d%d%d", &tmp_start, &tmp_end, &tmp_len);
		road_g[tmp_start][0].length ++;//the first road len indicates number of neighbours
		road_g[tmp_start][road_g[tmp_start][0].length].length = tmp_len;
		road_g[tmp_start][road_g[tmp_start][0].length].end = tmp_end;
	}

	DFS(road_g[1], 0);

	for(int i = 1;i <= N;i++)
	{
		if (maximum < dist[i])
		{
			maximum = dist[i];
		}
	}
	printf("%d\n", maximum);
}




dijkstra 
-----------------------------------------------------

#include <iostream>
#include <set>
#include <vector>
using namespace std;
 
typedef vector<int> vi;
typedef pair<int,int> ii;
typedef vector<ii> vii;
typedef vector<vii> vvii;
 
const int MAX = 1001;
const int MAXINT = 1000000000;
 
int n;
vvii G(MAX);
vi D(MAX, MAXINT);
 
void Dijkstra(int s)
{
    set<ii> Q;
    D[s] = 0;
    Q.insert(ii(0,s));
 
    while(!Q.empty())
    {
        ii top = *Q.begin();
        Q.erase(Q.begin());
        int v = top.second;
        int d = top.first;
 
        for (vii::const_iterator it = G[v].begin(); it != G[v].end(); it++)
        {
            int v2 = it->first;
            int cost = it->second;
            if (D[v2] > D[v] + cost)
            {
                if (D[v2] != 1000000000)
                {
                    Q.erase(Q.find(ii(D[v2], v2)));
                }
                D[v2] = D[v] + cost;
                Q.insert(ii(D[v2], v2));
            }
        }
    }
}
 
int main()
{
    int m, s, t = 0;
    scanf("%d %d %d %d", &n, &m, &s, &t);
 
    for (int i = 0; i < m; i++)
    {
        int a, b, w = 0;
        scanf("%d %d %d", &a, &b, &w);
        G[a - 1].push_back(ii(b - 1, w));
        G[b - 1].push_back(ii(a - 1, w));
    }
 
    Dijkstra(s - 1);
 
    printf("%d\n", D[t - 1]);
 
    return 0;
}

--------------------TOPOLOGICAL sort

vector<int> TOPOLOGICAL_SORT(int S[][MAX]) {

    queue<int> Q;

    for(int n=1; n<=node; n++) {
        if(INDEG[n] == 0) Q.push(n);
    }

    vector<int> topoList;

    while( !Q.empty())
	{
        int N = Q.front(); Q.pop();
        topoList.push_back(N);
        for(int M=1; M<=node; M++) 
		{
            if(S[N][M] == 1) {
                INDEG[M]--;
                if(INDEG[M] == 0) {
                    Q.push(M);
                }
            }
        }
    }
    return topoList;
}



kruskal-------------------------------------------




#include <cstdio>
#include <vector>
#include <algorithm>
using namespace std;

#define edge pair< int, int >
#define MAX 1001

// ( w (u, v) ) format
vector< pair< int, edge > > GRAPH, MST;
int parent[MAX], total, N, E;

int findset(int x, int *parent)
{
    if(x != parent[x])
        parent[x] = findset(parent[x], parent);
    return parent[x];
}

void kruskal()
{
    int i, pu, pv;
    sort(GRAPH.begin(), GRAPH.end()); // increasing weight
    for(i=total=0; i<E; i++)
    {
        pu = findset(GRAPH[i].second.first, parent);
        pv = findset(GRAPH[i].second.second, parent);
        if(pu != pv)
        {
            MST.push_back(GRAPH[i]); // add to tree
            total += GRAPH[i].first; // add edge cost
            parent[pu] = parent[pv]; // link
        }
    }
}

void reset()
{
    // reset appropriate variables here
    // like MST.clear(), GRAPH.clear(); etc etc.
    for(int i=1; i<=N; i++) parent[i] = i;
}

void print()
{
    int i, sz;
    // this is just style...
    sz = MST.size();
    for(i=0; i<sz; i++)
    {
        printf("( %d", MST[i].second.first);
        printf(", %d )", MST[i].second.second);
        printf(": %d\n", MST[i].first);
    }
    printf("Minimum cost: %d\n", total);
}

int main()
{
    int i, u, v, w;

    scanf("%d %d", &N, &E);
    reset();
    for(i=0; i<E; i++)
    {
        scanf("%d %d %d", &u, &v, &w);
        GRAPH.push_back(pair< int, edge >(w, edge(u, v)));
    }
    kruskal(); // runs kruskal and construct MST vector
    print(); // prints MST edges and weights

    return 0;
}

---------------Primm

void prim()
{
int current,totalvisited,mincost,i;
current=1;d[current]=0;
totalvisited=1;
visited[current]=1;
while(totalvisited!=v)
{
  for(i=1;i<=v;i++)
  {
    if(weight[current][i]!=0)
      if(visited[i]==0)
    if(d[i]>weight[current][i])
    {
      d[i]=weight[current][i];
      p[i]=current;
    }
  }
  mincost=32767;
  for(i=1;i<=v;i++)
  {
    if(visited[i]==0)
      if(d[i]<mincost)
      {
    mincost=d[i];
    current=i;
      }
  }
  visited[current]=1;
  totalvisited++;
}
mincost=0;
for(i=1;i<=v;i++)
  mincost+=d[i];
  cout<<"\nMinimum cost="<<mincost;
cout<<"\nMinimum span tree is";
for(i=1;i<=v;i++)
  cout<<"\nVertex "<<i<<" is connected to"<<p[i];
}


floyd-------------

for (k = 1; k <= n; k++)
for(i = 1; i <= n; i++)
for(j = 1; j <= n; j++)
if(dist[i][k] + dist[k][j] < dist[i][j])
dist[i][j]= dist[i][k] + dist[k][j];





int main()
{
  int w[100][100],d[100][100],i,j,k,n,t1,t2,t3,t4;
  cout<<"\nEnter the number of Nodes: ";
  cin>>n;
  cout<<"\nEnter the Weight Matrix";
  cout<<"\nEnter "<<MAX<<" if there is no connection between two nodes\n\n";
  for(i=0;i<n;i++)
  {
      for(j=0;j<n;j++)
      {
          cin>>w[i][j];
          d[i][j]=w[i][j];
      }
  }
  for(i=0;i<n;i++)
  {
      d[i][i]=0;
  }
  for(k=0;k<n;k++)
  {
      for(i=0;i<n;i++)
      {
         for(j=0;j<n;j++)
         {
            t1=d[i][k];
            t2=d[k][j];
            t3=d[i][j];
            if( t1 < MAX && t2 < MAX )
            {
                t4=t1+t2;
                d[i][j]=t4<t3?t4:t3;
            }
         }
      }
  }
  cout<<"\nThe Distance Matrix is:\n\n";
  for(i=0;i<n;i++)
  {
      for(j=0;j<n;j++)
      {
          cout<<d[i][j]<<" ";
      }
      cout<<"\n";
  }
  return 0;
}

